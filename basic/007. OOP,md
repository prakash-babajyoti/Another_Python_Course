### 7. **Object-Oriented Programming (OOP)**

Object-Oriented Programming (OOP) is a paradigm in which everything is represented as an **object**. Objects are instances of **classes**, which define their behavior and properties. OOP helps in organizing code, making it modular, reusable, and easier to manage.

#### Key Concepts in OOP:
1. **Classes and Objects**
2. **Attributes and Methods**
3. **Encapsulation**
4. **Inheritance**
5. **Polymorphism**

### 7.1 **Classes and Objects**

A **class** is a blueprint for creating objects. An **object** is an instance of a class.

##### Syntax for defining a class:
```python
class ClassName:
    # Class attributes and methods go here
```

##### Creating an Object:
```python
class Dog:
    def bark(self):
        print("Woof!")

# Creating an object (instance) of the class
my_dog = Dog()

# Calling a method
my_dog.bark()  # Output: Woof!
```

#### 7.2 **Attributes and Methods**

- **Attributes**: Variables that belong to the class or the object.
- **Methods**: Functions defined inside a class that describe the behavior of the object.

##### Example:
```python
class Car:
    def __init__(self, brand, model):
        self.brand = brand  # Attribute
        self.model = model  # Attribute

    def start(self):  # Method
        print(f"The {self.brand} {self.model} is starting.")

# Creating an object of the Car class
my_car = Car("Toyota", "Corolla")
my_car.start()  # Output: The Toyota Corolla is starting.
```

- The `__init__()` method is the **constructor** method, which is automatically called when an object is created. It is used to initialize the object's attributes.

#### 7.3 **Encapsulation**

**Encapsulation** is the concept of bundling the data (attributes) and methods that operate on the data into a single unit, i.e., the class. In Python, you can make attributes private by prefixing them with double underscores (`__`), so they cannot be accessed directly from outside the class.

##### Example:
```python
class BankAccount:
    def __init__(self, balance):
        self.__balance = balance  # Private attribute

    def deposit(self, amount):
        self.__balance += amount

    def get_balance(self):
        return self.__balance

account = BankAccount(1000)
account.deposit(500)
print(account.get_balance())  # Output: 1500
```

- Here, `__balance` is a private attribute and cannot be accessed directly outside the class.

#### 7.4 **Inheritance**

**Inheritance** allows one class (child class) to inherit the attributes and methods of another class (parent class). This allows code reuse and helps in building a hierarchical relationship between classes.

##### Example:
```python
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        print(f"{self.name} makes a sound.")

class Dog(Animal):  # Dog class inherits from Animal
    def speak(self):
        print(f"{self.name} barks.")

dog = Dog("Rover")
dog.speak()  # Output: Rover barks.
```

In this example, the `Dog` class inherits from the `Animal` class. The `Dog` class overrides the `speak()` method of the `Animal` class.

#### 7.5 **Polymorphism**

**Polymorphism** allows methods to have the same name but behave differently depending on the object that calls them. This is achieved through method overriding in inheritance, as shown in the previous example with `speak()`.

Another form of polymorphism is having functions or methods that can handle objects of different types.

##### Example:
```python
class Cat(Animal):
    def speak(self):
        print(f"{self.name} meows.")

def animal_sound(animal):
    animal.speak()

dog = Dog("Rover")
cat = Cat("Whiskers")

animal_sound(dog)  # Output: Rover barks.
animal_sound(cat)  # Output: Whiskers meows.
```

Here, the function `animal_sound()` can take different types of objects (dog, cat) and call their respective `speak()` methods, demonstrating polymorphism.

#### 7.6 **Class vs. Instance Attributes**

- **Instance Attributes**: Attributes specific to each object and defined within the `__init__()` method.
- **Class Attributes**: Shared by all instances of a class and defined outside the `__init__()` method.

##### Example:
```python
class Employee:
    company_name = "Tech Corp"  # Class attribute

    def __init__(self, name, salary):
        self.name = name  # Instance attribute
        self.salary = salary  # Instance attribute

emp1 = Employee("Alice", 50000)
emp2 = Employee("Bob", 60000)

print(emp1.company_name)  # Output: Tech Corp
print(emp2.company_name)  # Output: Tech Corp
```

In this example, `company_name` is a class attribute shared by both `emp1` and `emp2`, while `name` and `salary` are instance attributes specific to each employee.

### Summary of OOP Concepts:
- **Classes** are blueprints for creating objects.
- **Objects** are instances of classes with their own attributes and methods.
- **Encapsulation** ensures that data (attributes) and methods are bundled within a class.
- **Inheritance** allows a class to inherit the properties and methods of another class.
- **Polymorphism** enables a single method to behave differently based on the object calling it.

### Exercise:
1. Create a class `Book` with attributes `title` and `author`, and a method `display_info()` that prints the book’s title and author. Create an object of the `Book` class and call the method.
2. Create a parent class `Person` with a method `greet()`. Then, create a child class `Student` that inherits from `Person` and overrides the `greet()` method. Create an object of the `Student` class and call the `greet()` method.
3. Implement a class `Circle` that calculates the area of a circle. Use the `__init__()` method to set the radius and a method `area()` to calculate and return the area (π * radius²).
